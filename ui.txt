import React, { useState, useEffect } from "react";
import { PlusCircle, Upload, FileText } from "lucide-react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { motion } from "framer-motion";

// Replace with your API Gateway endpoint and S3 bucket URL
const API_BASE = "https://your-api-id.execute-api.region.amazonaws.com/dev";
const S3_BASE = "https://your-s3-bucket.s3.region.amazonaws.com/";

export default function ExpenseTracker() {
  const [expenses, setExpenses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Form states
  const [amount, setAmount] = useState("");
  const [description, setDescription] = useState("");
  const [file, setFile] = useState(null);

  // Fetch expenses
  const fetchExpenses = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await fetch(`${API_BASE}/expenses`);
      if (!res.ok) throw new Error("Failed to fetch expenses");
      const data = await res.json();
      setExpenses(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchExpenses();
  }, []);

  // Add expense
  const addExpense = async () => {
    setLoading(true);
    setError(null);
    try {
      // Step 1: Get presigned URL if file exists
      let receiptUrl = null;
      if (file) {
        const presignRes = await fetch(`${API_BASE}/expenses/presign`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ filename: file.name, type: file.type }),
        });
        if (!presignRes.ok) throw new Error("Failed to get presigned URL");
        const { uploadUrl, key } = await presignRes.json();

        // Step 2: Upload to S3
        const uploadRes = await fetch(uploadUrl, {
          method: "PUT",
          body: file,
          headers: { "Content-Type": file.type },
        });
        if (!uploadRes.ok) throw new Error("Upload to S3 failed");

        receiptUrl = `${S3_BASE}${key}`;
      }

      // Step 3: Add expense entry
      const expenseRes = await fetch(`${API_BASE}/expenses`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          amount,
          description,
          receiptUrl,
        }),
      });
      if (!expenseRes.ok) throw new Error("Failed to add expense");

      setAmount("");
      setDescription("");
      setFile(null);
      fetchExpenses();
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6 max-w-3xl mx-auto space-y-6">
      <motion.h1
        className="text-2xl font-bold text-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
      >
        Expense Tracker
      </motion.h1>

      {error && (
        <div className="bg-red-100 text-red-700 p-3 rounded-lg">
          {error}
        </div>
      )}

      {loading && (
        <div className="flex justify-center items-center">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-600"></div>
        </div>
      )}

      <Dialog>
        <DialogTrigger asChild>
          <Button className="flex items-center gap-2">
            <PlusCircle size={18} /> Add Expense
          </Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add Expense</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label>Amount</Label>
              <Input
                type="number"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
              />
            </div>
            <div>
              <Label>Description</Label>
              <Input
                type="text"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </div>
            <div>
              <Label>Receipt</Label>
              <Input
                type="file"
                onChange={(e) => setFile(e.target.files[0])}
              />
            </div>
            <Button onClick={addExpense}>
              <Upload size={18} className="mr-2" /> Save
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      <div className="grid gap-4">
        {expenses.map((exp) => (
          <Card key={exp.id}>
            <CardHeader>
              <CardTitle>â‚¹{exp.amount}</CardTitle>
            </CardHeader>
            <CardContent className="flex justify-between">
              <span>{exp.description}</span>
              {exp.receiptUrl && (
                <a href={exp.receiptUrl} target="_blank" rel="noreferrer">
                  <FileText className="text-blue-600 hover:scale-110 transition-transform" />
                </a>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
